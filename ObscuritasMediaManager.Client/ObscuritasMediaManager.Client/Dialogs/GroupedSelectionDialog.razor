@inherits DialogBase
@typeparam T

<DialogBase Heading="@Heading" Actions="@Actions">
    <div id="toggles">
        @if (CanAdd)
        {
            <div id="create-toggle" @onclick="()=> AddMode = !AddMode">
                <CustomToggle state="@(AddMode ? CheckboxState.Ignore : CheckboxState.Forbid)"
                              Toggled="(state)=> AddMode = state == CheckboxState.Ignore"
                              Color="darkgreen"></CustomToggle>
                <div id="add-text">Hinzufügen umschalten</div>
            </div>
        }
        @if (CanRemove)
        {
            <div id="delete-toggle" @onclick="()=> DeleteMode = !DeleteMode">
                <CustomToggle state="@(DeleteMode ? CheckboxState.Ignore : CheckboxState.Forbid)"
                              Toggled="(state)=> DeleteMode = state == CheckboxState.Ignore"
                              Color="darkred"></CustomToggle>
                <div id="delete-text">Löschen umschalten</div>
            </div>
        }
    </div>
    <div id="groups-wrapper">
        @foreach (var group in Items.GroupBy(x => GetGroupName(x)))
        {
            <div class="group">
                <div class="group-name">@group.Key</div>
                <div class="group-container">
                    @foreach (var item in group)
                    {
                        <div class="item-wrapper">
                            <div class="item"
                                 selected="@(IsSelected(item))"
                            @onclick="async ()=> { await ItemToggledAsync(item); StateHasChanged(); }">
                                @GetName(item)
                            </div>
                            @if (DeleteMode)
                            {
                                <div class="delete-button"
                                @onclick="async ()=> { await ItemDeletedAsync(item); StateHasChanged(); }"
                                @onclick:stopPropagation
                                @onclick:preventDefault>
                                    &times;
                                </div>
                            }
                        </div>
                    }
                </div>
                @if (AddMode)
                {
                    <div class="item-wrapper new-item-wrapper"
                    @onkeypress:stopPropagation>
                        <div contenteditable="plaintext-only"
                             class="new-item"
                             placeholder="Neuer Eintrag..."
                        @oninput2="@(async (args)=> {if(args.Key=="Enter") { await ItemAddedAsync((group.Key, args.Value!)); StateHasChanged(); }})">
                        </div>
                        <div class="save-icon" Icon="@Icons.SaveTick"></div>
                    </div>
                }
            </div>
        }
    </div>
</DialogBase>