@page "/media"
@inherits ElementBase

@inject GenreRepository GenreRepository
@inject MediaRepository MediaRepository
@inject UserRepository UserRepository
@inject MediaFilterService MediaFilterService
@inject NavigationManager NavigationManager


<PageTitle>Page Title</PageTitle>


<div id="media-page-container">
    <MediaFilterSidebar Filter="@(filter)" FilterChanged="UpdateFilter">
        <Footer>@(filteredMedia.Count) Ergebnisse gefunden</Footer>
    </MediaFilterSidebar>
    <PaginatedScrolling ScrollTopThreshold="50" ScrollBottom="()=>currentPage++" @ref="PaginatedScrolling">
        @if (loading)
        {
            <PartialLoading></PartialLoading>
        }
        else
        {
            <div id="result-container">
                <div id="add-entry-button" class="media-tile-button">
                    <div class="media-tile-icon" Icon="@Icons.Plus"></div>
                    <div class="media-tile-text">Eintrag hinzufügen</div>
                </div>
                <div id="add-folder-button" class="media-tile-button">
                    <div class="media-tile-icon" Icon="@Icons.Import"></div>
                    <div class="media-tile-text">Ordner hinzufügen</div>
                </div>

                @foreach (var media in paginatedMedia)
                {
                    <a class="media-tile-link"
                    @onclick="@(()=>NavigationManager.NavigateTo($"media-detail?guid={media.Id}"))">
                        <MediaTile Media="@media"
                                   ImageReceived="@((imageData) => changePropertyOf(media,x=>x.Image, imageData))"
                                   RatingChanged="@((rating) => changePropertyOf(media, x=>x.Rating, rating))"
                                   GenresChanged="@((genres) => changePropertyOf(media, x=>x.Genres, genres))"></MediaTile>
                    </a>
                }

            </div>
        }
    </PaginatedScrolling>
</div>