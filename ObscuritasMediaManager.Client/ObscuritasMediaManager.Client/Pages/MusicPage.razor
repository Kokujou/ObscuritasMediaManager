@page "/music"
@using ObscuritasMediaManager.Backend.DataRepositories;
@using ObscuritasMediaManager.Client.Extensions;

@inherits ElementBase

@inject MusicFilterService MusicFilterService
@inject UserRepository UserRepository
@inject NavigationManager NavigationManager

<div id="music-page">
    <div id="search-panel-container">
        <MusicFilter filter="@(filter)"
                     sortingProperty="@(sortingProperty)"
                     sortingDirection="@(sortingDirection)"
                     filterChanged="UpdateFilterAsync"
                     Id="music-filter"></MusicFilter>
        <div id="result-count-label">
            @(filteredTracks.Count()) von @(musicTracks.Count) Musik-Tracks
        </div>
    </div>
    <div id="result-options-container">
        <div id="result-options">
            <div class="option-section" id="import-section">
                <a id="import-files" @click="@(()=>importFolder())" tooltip="Tracks importieren"></a>
                <a id="create-song"></a>
            </div>
            <div class="option-section" id="import-section">
                <a id="cleanup-tracks"
                   @click="@(() => cleanupTracks())"
                   tooltip="Defekte Tracks bereinigen"></a>
            </div>
            <div class="option-section" id="playlist-section">
                <a id="add-to-playlist"
                   tooltip="Zu einer Playlist hinzufügen"
                   @click="@(() => showPlaylistSelectionDialog())"></a>
                <a id="create-playlist"
                   tooltip="Playlist erstellen"
                   @click="@(() => showCreatePlaylistDialog())"></a>
                <a id="play-playlist"
                   tooltip="Ausgewählte Tracks abspielen"
                   @click="@(() => PlaySelected())"></a>
            </div>

            <div class="option-section">
                <RangeSlider ValueChanged="@((value) => changeVolume(value))"
                             Step="1"
                             Min="0"
                             Max="100"
                             Value="@((int)(Session.Audio.Volume * 100))">
                </RangeSlider>
            </div>

            <div id="active-track-warning"
                 ?invisible="@(Session.Audio.PlaybackState == NAudio.Wave.PlaybackState.Paused)"
                 @click="@(() => jumpToActive())">
                Ein Track wird gerade abgespielt.&nbsp; <u> Klicken Sie hier </u> &nbsp;um zum aktiven Track zu
                springen.
            </div>
        </div>
    </div>
    <PaginatedScrolling Id="search-results-container"
                        ScrollTopThreshold="50"
                        ScrollBottom="@(() => loadNext())">
        @if (loading)
        {
            <PartialLoading></PartialLoading>
        }
        else
        {
            <div id="search-results">
                @foreach (var playlist in paginatedPlaylists)
                {
                    <div class="audio-link-container">
                        <a class="audio-tile-link"
                           onclick="@(()=>NavigationManager.NavigateTo($"music-playlist-page?guid={playlist.Id}"))">
                            <PlaylistTile Playlist="@(playlist)"
                                          LocalExport="@(() => exportPlaylist("local", playlist))"
                                          GlobalExport="@(() => exportPlaylist("global", playlist))"
                                          Remove="@(() => removePlaylist(playlist))"></PlaylistTile>
                        </a>
                    </div>
                }
                @foreach (var track in paginatedTracks)
                {
                    <div class="audio-link-container">
                        @if (selectionMode)
                        {
                            <input type="checkbox"
                                   class="audio-select"
                                   ?checked="@(selectedHashes.Contains(track.Hash))"
                                   @change="@(() => selectTrack(track.Hash))" />
                        }
                        <a class="audio-tile-link"
                           onclick="@(()=>NavigationManager.NavigateTo($"music-playlist-page?track={track.Hash}"))">
                            disabled="@(selectionMode)"
                            onpointerdown="@(() => startSelectionModeTimer(track.Hash))"
                            onpointerup="@(() => stopSelectionModeTimer(track.Hash))">
                            <AudioTile Track="@(track)"
                                       Visualization="@(currentTrack?.Path == track.Path)"
                                       Paused="@(Session.Audio.PlaybackState == NAudio.Wave.PlaybackState.Paused || currentTrack?.Path != track.Path)"
                                       MusicToggled="@(() => toggleMusic(track))"
                                       SoftDelete="@(() => softDeleteTrack(track))"
                                       HardDelete="@(() => hardDeleteTrack(track))"
                                       Restore="@(() => undeleteTrack(track))"></AudioTile>
                        </a>
                    </div>
                }
            </div>
        }
    </PaginatedScrolling>
</div>
