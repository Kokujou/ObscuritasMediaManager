@inherits ElementBase

<div id="media-filter-sidebar">
    <div id="heading">
        <div id="heading-text">Suche</div>
        <div class="icon-button reset-button" Icon="@Icons.Revert" @onclick="@(() => resetFilter())"></div>
    </div>
    <div id="filters">
        <div id="search-filter" class="filter-entry" simple>
            <input id="search-input"
                   type="text"
                   placeholder="Bitte Suchbegriff eingeben..."
                   value="@(Filter.search ?? "")"
            @oninput="@((e) => ChangeFilter(x=>x.search = (string?)e.Value ?? string.Empty))"
            @onchange="@((e) => ChangeFilter(x => x.search = (string?)e.Value ?? string.Empty))" />
        </div>
        <div id="sorting" class="filter-entry" complex>
            <div class="filter-heading">
                <div class="filter-label">Sortieren:</div>
            </div>
            <div id="sort-input">
                <DropDown options="@(MediaFilter.SortableProperties.Select((x) =>
                            new DropDown<Func<MediaModel, object>>.Option() {
                                value= x.Property,
                                text= x.Translation,
                                state= x.Property == Filter.sortingPropertyExpression ? CheckboxState.Ignore : CheckboxState.Forbid,
                            }
                        ))"
                          unsetText="Keine Sortierung"
                          maxDisplayDepth="5"
                          SelectionChanged="@((e) => ChangeFilter(x=>x.sortingPropertyExpression = e.value))"
                          T="Func<MediaModel, object>">
                </DropDown>
                <div id="ascending-icon"
                     active="@(Filter.sortingDirection == SortDirection.Ascending)"
                     class="icon-button" Icon="@(Icons.Ascending)"
                @onclick="@(() => ChangeFilter(x=>x.sortingDirection= SortDirection.Ascending))"></div>
                <div id="descending-icon"
                     active="@(Filter.sortingDirection == SortDirection.Descending)"
                     class="icon-button" Icon="@(Icons.Descending)"
                @onclick="@(() => ChangeFilter(x=>x.sortingDirection= SortDirection.Descending))"></div>
            </div>
        </div>
        <div id="language-filter" class="filter-entry" simple>
            <div class="filter-heading">
                <div class="filter-label">Sprache:</div>
            </div>
            <div id="language-switcher-mini">
                <TriValueCheckbox valueChanged="@((e) => ChangeFilter(x=>x.languages.states[Nation.German]= e))"
                                  value="@(Filter.languages.states[Nation.German])">
                    <div class="icon-button" Language="@(Nation.German)"></div>
                </TriValueCheckbox>
                <TriValueCheckbox valueChanged="@((e) => ChangeFilter(x=>x.languages.states[Nation.Japanese] = e))"
                                  value="@(Filter.languages.states[Nation.Japanese])">
                    <div class="icon-button" Language="@(Nation.Japanese)"></div>
                </TriValueCheckbox>
            </div>
        </div>
        <div id="category-filter" class="filter-entry" complex>
            <div class="filter-heading">
                <div class="filter-label">Kategorie:</div>
                <div class="icon-button" Icon="@(Icons.SelectAll)"
                @onclick="@(() => ChangeFilter(x=>x.category.ChangeAll( CheckboxState.Ignore)))"></div>
                <div class="icon-button" Icon="@(Icons.UnselectAll)"
                @onclick="@(() => ChangeFilter(x=>x.category.ChangeAll(CheckboxState.Forbid)))"></div>
            </div>
            <DropDown options="@(DropDown<MediaCategory>.Option
                                .createSimpleArray(Enum.GetValues<MediaCategory>(), x=> Filter.category.states[x]))"
                                useToggle
                                multiselect
                       maxDisplayDepth="5"
                       SelectionChanged="@((e) => ChangeFilter(x=>x.category.states[e.value] = e.state))"
                       T="MediaCategory"></DropDown>
         </div>
         <div id="rating-filter" class="filter-entry" complex>
             <div class="filter-heading">
                 <div class="filter-label">Bewertung:</div>
             </div>
             <StarRating max="5"
                         values="@(Filter.ratings.required.ToList())"
                         ratingChanged="@((e) => ChangeFilter(x=>x.ratings.states[e.rating] = e.include ? CheckboxState.Require : CheckboxState.Forbid
            ))">
             </StarRating>
         </div>
         <div id="genre-filter" class="filter-entry" complex>
             <div class="filter-heading">
                 <div class="filter-label">
                     Genres:
                     <div class="icon-button" Icon="@(Icons.Popup)" @onclick="@(() => openGenreDialog())"></div>
                 </div>
                 <div class="icon-button" Icon="@(Icons.SelectAll)"
                 @onclick="@(() => ChangeFilter(x=>x.genres.ChangeAll(CheckboxState.Ignore)))"></div>
                 <div class="icon-button" Icon="@(Icons.UnselectAll)"
                 @onclick="@(() => ChangeFilter(x=>x.genres.ChangeAll(CheckboxState.Forbid)))"></div>
             </div>
         </div>
         <div id="release-filter" class="filter-entry" complex>
             <div class="filter-heading">
                 <div class="filter-label">Release:</div>
             </div>
             <RangeSelector Min="1900"
                            Max="@(DateTime.Now.Year)"
                            Left="@(Filter.release.min ?? 1900)"
                            Right="@(Filter.release.max ?? DateTime.Now.Year)"
                            RangeChanged="@((e) =>
                       ChangeFilter(x=>x.release = ( min: e.left, max: e.right )))"></RangeSelector>
         </div>
         <div id="content-warning-filter" class="filter-entry" complex>
             <div class="filter-heading">
                 <div class="filter-label">Inhaltswarnungen:</div>
                 <div class="icon-button reset-button" Icon="@Icons.Revert"
                 @onclick="@(() => ChangeFilter(x=>x.contentWarnings.ChangeAll(CheckboxState.Ignore)))"></div>
             </div>
             <SideScroller>
                 @foreach (var warning in Enum.GetValues<ContentWarning>())
                {
                    <TriValueCheckbox allowThreeValues
                                       value="@(Filter.contentWarnings.states[warning])"
                                       valueChanged="@((e) => ChangeFilter(x=>x.contentWarnings.states[warning]=e))">
                         <div class="icon-button" ContentWarning="@(warning)"></div>
                     </TriValueCheckbox>
                }
            </SideScroller>
        </div>
        <div id="target-group-filter" class="filter-entry" complex>
            <div class="filter-heading">
                <div class="filter-label">Zielgruppe:</div>
                <div class="icon-button reset-button" Icon="@Icons.Revert"
                @onclick="@(() => ChangeFilter(x=>x.targetGroups.ChangeAll(CheckboxState.Ignore)))"></div>
            </div>
            <SideScroller>
                @foreach (var group in Enum.GetValues<TargetGroup>())
                {
                    <TriValueCheckbox allowThreeValues
                                       value="@(Filter.targetGroups.states[group])"
                                       valueChanged="@((e) => ChangeFilter(x=>x.targetGroups.states[group] = e))">
                         <div class="icon-button" TargetGroup="@(group)"></div>
                     </TriValueCheckbox>
                }
            </SideScroller>
        </div>
    </div>
    <div id="footer">
        @Footer
    </div>
</div>