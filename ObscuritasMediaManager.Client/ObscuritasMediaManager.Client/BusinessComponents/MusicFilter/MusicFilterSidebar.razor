@inherits ElementBase

<div id="music-filter">
    <div id="search-heading">
        <div class="heading-label">Suche</div>
        <div class="icon-button" Icon="@Icons.Revert" @onclick="@(() => resetAllFilters())"></div>
    </div>
    <div id="search-panel">
        <div id="text-filter" class="filter" simple>
            <input type="text"
                   id="search-input"
                   placeholder="Suchbegriff eingeben..."
            @oninput="@((e) => changeFilter(x=>x.search = (string)e.Value!))"
            @onchange="@((e) => changeFilter(x=>x.search = (string)e.Value!))"
                   value="@(filter.search ?? "")" />
        </div>
        <div id="complete-filter" class="filter" simple>
            <label for="scales">Vollständig: </label>
            <CustomToggle state="@(filter.showComplete)"
                                        threeValues
                           Toggled="@((state) => changeFilter(x=>x.showComplete = state))"></CustomToggle>
         </div>
         <div id="show-playlists-filter" class="filter" simple>
             <label for="scales">Playlists anzeigen: </label>
             <CustomToggle state="@(filter.showPlaylists)"
                                        threeValues
                           Toggled="@((state) => changeFilter(x=>x.showPlaylists = state))"></CustomToggle>
         </div>
         <div id="show-deleted-filter" class="filter" simple>
             <label for="scales">Gelöschte anzeigen: </label>
             <div id="show-deleted-toggle">
                 <CustomToggle state="@(filter.showDeleted)"
                                                threeValues
                               Toggled="@((state) => changeFilter(x=>x.showDeleted = state))"></CustomToggle>
             </div>
         </div>
         <div id="mood-filter" class="filter">
             <div class="filter-heading">
                 <div class="heading-label">Sortieren:</div>
                 <div class="icon-button " Icon="@(Icons.Revert)"
                 @onclick="@(() => changeFilter(x=>x.MusicSortProperty = null))"></div>
             </div>
             <div id="sorting-container">
                 <DropDown T="Expression<Func<MusicModel,object>>"
                           options="@(SortableProperties.Select(prop=>new DropDown<Expression<Func<MusicModel, object>>>.Option(){
                                    value = prop,
                                    text=prop.GetPropertyName(),
                                    state = prop.ValueEquals(filter.MusicSortProperty) ? CheckboxState.Ignore : CheckboxState.Forbid
                                }))"
                           unsetText="Keine Sortierung"
                           maxDisplayDepth="5"
                           SelectionChanged="@((e) => changeFilter(x=>x.MusicSortProperty = e.value))">
                 </DropDown>
                 <div id="ascending-icon"
                      active="@(filter.SortDirection == SortDirection.Ascending)"
                      class="icon-button " Icon="@(Icons.Ascending)"
                 @onclick="@(() => changeFilter(x=>x.SortDirection = SortDirection.Ascending))"></div>
                 <div id="descending-icon"
                      active="@(filter.SortDirection == SortDirection.Descending)"
                      class="icon-button " Icon="@(Icons.Descending)"
                 @onclick="@(() => changeFilter(x=>x.SortDirection = SortDirection.Descending))"></div>
             </div>
         </div>
         <div id="language-filter" class="filter">
             <div class="filter-heading">
                 <div class="heading-label">Sprache:</div>
                 <div class="icon-button " Icon="@(Icons.SelectAll)"
                 @onclick="@(() => changeFilter(x=>x.languages.ChangeAll(CheckboxState.Require)))"></div>
                 <div class="icon-button " Icon="@(Icons.UnselectAll)"
                 @onclick="@(() => changeFilter(x=>x.languages.ChangeAll(CheckboxState.Forbid)))"></div>
             </div>
             <SideScroller>
                 @foreach (var type in Enum.GetValues<Nation>())
                {
                    <TriValueCheckbox valueChanged="@((e) => changeFilter(x=>x.languages.states[type]= e))"
                                      value="@(filter.languages.states[type])">
                        <div class="inline-icon" language="@(type)"></div>
                    </TriValueCheckbox>
                }
            </SideScroller>
        </div>
        <div id="nation-filter" class="filter">
            <div class="filter-heading">
                <div class="heading-label">Herkunftsland:</div>
                <div class="icon-button " Icon="@(Icons.SelectAll)"
                @onclick="@(() => changeFilter(x=>x.nations.ChangeAll(CheckboxState.Require)))"></div>
                <div class="icon-button " Icon="@(Icons.UnselectAll)"
                @onclick="@(() => changeFilter(x=>x.nations.ChangeAll(CheckboxState.Forbid)))"></div>
            </div>
            <SideScroller>
                @foreach (var type in Enum.GetValues<Nation>())
                {
                    <TriValueCheckbox valueChanged="@((e) => changeFilter(x=>x.nations.states[type]= e))"
                                      value="@(filter.nations.states[type])">
                        <div class="inline-icon" Nation="@(type)"></div>
                    </TriValueCheckbox>
                }
            </SideScroller>
        </div>
        <div id="instrument-type-filter" class="filter">
            <div class="filter-heading">
                <div class="heading-label">Instrument Typen:</div>
                <div class="icon-button " Icon="@(Icons.SelectAll)"
                @onclick="@(() => changeFilter(x=>x.instrumentTypes.ChangeAll(CheckboxState.Require)))"></div>
                <div class="icon-button " Icon="@(Icons.UnselectAll)"
                @onclick="@(() => changeFilter(x=>x.instrumentTypes.ChangeAll(CheckboxState.Forbid)))"></div>
                <div class="icon-button " Icon="@(Icons.Revert)"
                @onclick="@(() => changeFilter(x=>x.instrumentTypes.ChangeAll(CheckboxState.Ignore)))"></div>
            </div>
            <SideScroller>
                @foreach (var type in Enum.GetValues<InstrumentType>())
                {
                    <TriValueCheckbox allowThreeValues
                                       valueChanged="@((state) => changeFilter(x=>x.instrumentTypes.states[type]= state))"
                                       value="@(filter.instrumentTypes.states[type])"
                                       disabled="@(!canFilterInstrumentType(type))">
                         <div class="inline-icon @(type)"></div>
                     </TriValueCheckbox>
                }
            </SideScroller>
        </div>
        <div id="instrument-filter" class="filter">
            <div class="filter-heading">
                <div class="heading-label">Instrumente:</div>
                <div class="icon-button " Icon="@(Icons.Popup)"
                @onclick="@(() => showInstrumentFilterPopup())"></div>
                <div class="icon-button " Icon="@(Icons.SelectAll)"
                @onclick="@(() => changeFilter(x=>x.instruments.ChangeAll(CheckboxState.Require)))"></div>
                <div class="icon-button " Icon="@(Icons.UnselectAll)"
                @onclick="@(() => changeFilter(x=>x.instruments.ChangeAll(CheckboxState.Forbid)))"></div>
                <div class="icon-button " Icon="@(Icons.Revert)"
                @onclick="@(() => changeFilter(x=>x.instruments.ChangeAll(CheckboxState.Ignore)))"></div>
            </div>
        </div>
        <div id="rating-filter" class="filter">
            <div class="filter-heading">
                <div class="heading-label">Bewertung:</div>
                <div class="icon-button " Icon="@(Icons.SelectAll)"
                @onclick="@(() => changeFilter(x=>x.ratings.ChangeAll(CheckboxState.Require)))"></div>
                <div class="icon-button " Icon="@(Icons.UnselectAll)"
                @onclick="@(() => changeFilter(x=>x.ratings.ChangeAll(CheckboxState.Forbid)))"></div>
            </div>
            <StarRating max="5"
                        values="@(filter.ratings.states.Keys.Where((x)=> filter.ratings.states[x] == CheckboxState.Require).Select((x) => x).ToList())"
                        ratingChanged="@((e) => changeFilter(x=>x.ratings.states[e.rating] = e.include ? CheckboxState.Require : CheckboxState.Forbid))">
            </StarRating>
        </div>
        <div id="mood-filter" class="filter">
            <div class="filter-heading">
                <div class="heading-label">Stimmung:</div>
                <div class="icon-button " Icon="@(Icons.SelectAll)"
                @onclick="@(() => changeFilter(x=>x.moods.ChangeAll(CheckboxState.Ignore)))"></div>
                <div class="icon-button " Icon="@(Icons.UnselectAll)"
                @onclick="@(() => changeFilter(x=>x.moods.ChangeAll(CheckboxState.Forbid)))"></div>
            </div>
            <DropDown SelectionChanged="@((e) => changeFilter(x=>x.moods.states[e.value] = e.state))"
                      options="@(Enum.GetValues<Mood>().Select((x) =>
                        new DropDown<Mood>.Option(){
                            value= x,
                            text= x.ToString(),
                            color= x.GetColorCode(),
                            state= filter.moods.states[x],
                        }
                    ))"
                      unsetText="Keine Einträge ausgewählt"
                                multiselect
                                threeValues
                                useToggle
                       T="Mood"
                       maxDisplayDepth="5">
             </DropDown>
         </div>
         <div id="genre-filter" class="filter">
             <div class="filter-heading">
                 <div class="heading-label">genres:</div>
                 <div class="icon-button " Icon="@(Icons.SelectAll)"
                 @onclick="@(() => changeFilter(x=>x.genres.ChangeAll(CheckboxState.Ignore)))"></div>
                 <div class="icon-button " Icon="@(Icons.UnselectAll)"
                 @onclick="@(() => changeFilter(x=>x.genres.ChangeAll(CheckboxState.Forbid)))"></div>
             </div>
             <DropDown SelectionChanged="@((e) => changeFilter(x=>x.genres.states[e.value] = e.state))"
                       options="DropDown<MusicGenre>.Option.createSimpleArray(Enum.GetValues<MusicGenre>(), x=> filter.genres.states[x])"
                                multiselect
                                useToggle
                                threeValues
                       unsetText="Keine Einträge ausgewählt"
                       maxDisplayDepth="5"
                       T="MusicGenre">
             </DropDown>
         </div>
         <div id="instrumentation-filter" class="filter">
             <div class="filter-heading">
                 <div class="heading-label">Instrumentverteilung:</div>
                 <div class="icon-button " Icon="@(Icons.SelectAll)"
                 @onclick="@(() => changeFilter(x=>x.instrumentations.ChangeAll(CheckboxState.Ignore)))"></div>
                 <div class="icon-button " Icon="@(Icons.UnselectAll)"
                 @onclick="@(() => changeFilter(x=>x.instrumentations.ChangeAll(CheckboxState.Forbid)))"></div>
             </div>
             <DropDown SelectionChanged="@((e) => changeFilter(x=>x.instrumentations.states[e.value] = e.state))"
                       options="@(DropDown<Instrumentation>.Option.createSimpleArray( Enum.GetValues<Instrumentation>(), x=> filter.instrumentations.states[x]))"
                                useToggle
                                multiselect
                       maxDisplayDepth="5"
                       T="Instrumentation">
             </DropDown>
         </div>
         <div id="participant-count-filter" class="filter">
             <div class="filter-heading">
                 <div class="heading-label">Mitgliederzahl:</div>
                 <div class="icon-button " Icon="@(Icons.SelectAll)"
                 @onclick="@(() => changeFilter(x=>x.participants.ChangeAll(CheckboxState.Require)))"></div>
                 <div class="icon-button " Icon="@(Icons.UnselectAll)"
                 @onclick="@(() => changeFilter(x=>x.participants.ChangeAll(CheckboxState.Forbid)))"></div>
             </div>
             <SideScroller>
                 @foreach (var type in Enum.GetValues<Participants>())
                {
                    <TriValueCheckbox valueChanged="@((state) => changeFilter(x=>x.participants.states[type] = state))"
                                      value="@(filter.participants.states[type])">
                        <div class="inline-icon @(type)"></div>
                    </TriValueCheckbox>
                }
            </SideScroller>
        </div>
    </div>
</div>