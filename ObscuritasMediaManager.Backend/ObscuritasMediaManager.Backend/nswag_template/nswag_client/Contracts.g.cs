//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"

namespace ObscuritasMediaManager.Backend.Api.Contracts
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface IFileClient
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ObscuritasMediaManagerBackendException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> GetVideoAsync(string videoPath = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ObscuritasMediaManagerBackendException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> GetAudioAsync(string audioPath = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ObscuritasMediaManagerBackendException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> ValidateAsync(System.Collections.Generic.IEnumerable<string> fileUrls, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface IGenreClient
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ObscuritasMediaManagerBackendException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> GetAllAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface IMediaClient
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ObscuritasMediaManagerBackendException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> GetAsync(System.Guid guid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ObscuritasMediaManagerBackendException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> GetAllAsync(string type = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ObscuritasMediaManagerBackendException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> BatchPostStreamingEntriesAsync(System.Collections.Generic.IEnumerable<MediaModel> media, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ObscuritasMediaManagerBackendException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> UpdateMediaAsync(MediaModel media, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ObscuritasMediaManagerBackendException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> AddMediaImageAsync(UpdateImageRequest request, System.Guid guid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ObscuritasMediaManagerBackendException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> DeleteMediaImageAsync(System.Guid guid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface IMusicClient
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ObscuritasMediaManagerBackendException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> BatchCreateMusicTracksAsync(System.Collections.Generic.IEnumerable<MusicModel> tracks, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ObscuritasMediaManagerBackendException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<MusicModel>> GetAllAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ObscuritasMediaManagerBackendException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MusicModel> GetAsync(System.Guid guid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ObscuritasMediaManagerBackendException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<InstrumentModel>> GetInstrumentsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ObscuritasMediaManagerBackendException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> UpdateAsync(System.Guid id, UpdateRequestOfMusicModel updateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface IPlaylistClient
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ObscuritasMediaManagerBackendException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> CreateTemporaryPlaylistAsync(System.Collections.Generic.IEnumerable<System.Guid> entries, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ObscuritasMediaManagerBackendException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> GetTemporaryPlaylistAsync(System.Guid guid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface IStreamingClient
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ObscuritasMediaManagerBackendException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> BatchPostStreamingEntriesAsync(System.Collections.Generic.IEnumerable<StreamingEntryModel> streamingEntries, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ObscuritasMediaManagerBackendException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> GetStreamingEntryAsync(System.Guid guid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ObscuritasMediaManagerBackendException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> GetStreamAsync(System.Guid guid, string season, int episode, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class MediaModel 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rating", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Rating { get; set; }
    
        [Newtonsoft.Json.JsonProperty("release", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Release { get; set; }
    
        [Newtonsoft.Json.JsonProperty("genreString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GenreString { get; set; }
    
        [Newtonsoft.Json.JsonProperty("genres", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> Genres { get; set; }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int State { get; set; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("image", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Image { get; set; }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static MediaModel FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MediaModel>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class UpdateImageRequest 
    {
        [Newtonsoft.Json.JsonProperty("image", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Image { get; set; }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static UpdateImageRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdateImageRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class MusicModel 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("author", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Author { get; set; }
    
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Source { get; set; }
    
        [Newtonsoft.Json.JsonProperty("mood", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Mood Mood { get; set; }
    
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Nation Language { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Nation Nation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("instrumentation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Instrumentation Instrumentation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("participants", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Participants Participants { get; set; }
    
        [Newtonsoft.Json.JsonProperty("instrumentsString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InstrumentsString { get; set; }
    
        [Newtonsoft.Json.JsonProperty("genreString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GenreString { get; set; }
    
        [Newtonsoft.Json.JsonProperty("genres", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.ObjectModel.ObservableCollection<Genre> Genres { get; set; }
    
        [Newtonsoft.Json.JsonProperty("src", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Src { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rating", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte Rating { get; set; }
    
        [Newtonsoft.Json.JsonProperty("complete", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Complete { get; set; }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static MusicModel FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MusicModel>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Mood
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Unset")]
        Unset = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Happy")]
        Happy = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Aggressive")]
        Aggressive = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Sad")]
        Sad = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Calm")]
        Calm = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Romantic")]
        Romantic = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Dramatic")]
        Dramatic = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Epic")]
        Epic = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Funny")]
        Funny = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Passionate")]
        Passionate = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Monotonuous")]
        Monotonuous = 10,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Nation
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Unset")]
        Unset = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Japanese")]
        Japanese = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"English")]
        English = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"German")]
        German = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Spain")]
        Spain = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Chinese")]
        Chinese = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Italian")]
        Italian = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Russian")]
        Russian = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SouthAmerican")]
        SouthAmerican = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"African")]
        African = 9,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Instrumentation
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Unset")]
        Unset = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mono")]
        Mono = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Groups")]
        Groups = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mixed")]
        Mixed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Participants
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Unset")]
        Unset = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Solo")]
        Solo = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SmallGroup")]
        SmallGroup = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LargeGroup")]
        LargeGroup = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SmallOrchestra")]
        SmallOrchestra = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LargeOrchestra")]
        LargeOrchestra = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Genre
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Unset")]
        Unset = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Avantgarde")]
        Avantgarde = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Blues")]
        Blues = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Classic")]
        Classic = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Comedy")]
        Comedy = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Country")]
        Country = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EasyListening")]
        EasyListening = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Electronic")]
        Electronic = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"House")]
        House = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Flamenco")]
        Flamenco = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Folk")]
        Folk = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Jazz")]
        Jazz = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Latin")]
        Latin = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Pop")]
        Pop = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RnB")]
        RnB = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Soul")]
        Soul = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Rock")]
        Rock = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Metal")]
        Metal = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"March")]
        March = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Moe")]
        Moe = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Wagakki")]
        Wagakki = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Medley")]
        Medley = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Parody")]
        Parody = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ballad")]
        Ballad = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FilmMusic")]
        FilmMusic = 24,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class InstrumentModel 
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstrumentType Type { get; set; }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static InstrumentModel FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InstrumentModel>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum InstrumentType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Unset")]
        Unset = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Vocal")]
        Vocal = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WoodWind")]
        WoodWind = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Brass")]
        Brass = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Percussion")]
        Percussion = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Stringed")]
        Stringed = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Keyboard")]
        Keyboard = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Electronic")]
        Electronic = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class UpdateRequestOfMusicModel 
    {
        [Newtonsoft.Json.JsonProperty("oldModel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MusicModel OldModel { get; set; }
    
        [Newtonsoft.Json.JsonProperty("newModel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MusicModel NewModel { get; set; }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static UpdateRequestOfMusicModel FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdateRequestOfMusicModel>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class StreamingEntryModel 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("season", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Season { get; set; }
    
        [Newtonsoft.Json.JsonProperty("episode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Episode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("src", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Src { get; set; }
    
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
        public static StreamingEntryModel FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<StreamingEntryModel>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class FileResponse : System.IDisposable
    {
        private System.IDisposable _client;
        private System.IDisposable _response;

        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public System.IO.Stream Stream { get; private set; }

        public bool IsPartial
        {
            get { return StatusCode == 206; }
        }

        public FileResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable client, System.IDisposable response)
        {
            StatusCode = statusCode;
            Headers = headers;
            Stream = stream;
            _client = client;
            _response = response;
        }

        public void Dispose()
        {
            Stream.Dispose();
            if (_response != null)
                _response.Dispose();
            if (_client != null)
                _client.Dispose();
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ObscuritasMediaManagerBackendException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ObscuritasMediaManagerBackendException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ObscuritasMediaManagerBackendException<TResult> : ObscuritasMediaManagerBackendException
    {
        public TResult Result { get; private set; }

        public ObscuritasMediaManagerBackendException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016